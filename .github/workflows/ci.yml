name: Calendar CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    # 테스트용 PostgreSQL 서비스 추가
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: calendar_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: ${{ secrets.TEST_DB_PASSWORD || 'test_password_123' }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'corretto'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # 테스트용 환경변수 설정 (GitHub Secrets 사용)
      - name: Run tests
        env:
          SPRING_PROFILES_ACTIVE: test
          DB_URL: jdbc:postgresql://localhost:5432/calendar_test
          DB_USERNAME: postgres
          DB_PASSWORD: ${{ secrets.TEST_DB_PASSWORD || 'test_password_123' }}
          JWT_SECRET: ${{ secrets.TEST_JWT_SECRET || 'test-jwt-secret-for-ci-minimum-256-bits-length-required' }}
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          REDIS_PASSWORD: test_redis_password
          SPRING_JPA_HIBERNATE_DDL_AUTO: create-drop
          SPRING_FLYWAY_ENABLED: false
        run: ./gradlew test

  deploy:
    name: Deploy to EC2
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ secrets.AWS_EC2_USERNAME }}
          key: ${{ secrets.AWS_EC2_PRIVATE_KEY }}
          script: |
            # 프로젝트 디렉토리로 이동 (없으면 생성)
            cd ~/calendar-project || mkdir -p ~/calendar-project
            cd ~/calendar-project
            
            # 최신 코드 가져오기
            if [ -d ".git" ]; then
              echo "Updating existing repository..."
              git fetch origin
              git reset --hard origin/main
              git pull origin main
            else
              echo "Cloning repository..."
              git clone https://github.com/NiceLeeMan/calendar.git .
            fi
            
            # 기존 컨테이너 중단 및 제거
            echo "Stopping existing containers..."
            docker-compose down || true
            
            # 환경설정 파일 생성
            echo "Creating production environment file..."
            cat > .env.production << EOF
            # Database Configuration
            DB_URL=jdbc:postgresql://postgres:5432/calendar_prod
            DB_USERNAME=calendar_user
            DB_PASSWORD=${{ secrets.PROD_DB_PASSWORD || 'calendar_prod_password_123' }}
            
            # JWT Configuration
            JWT_SECRET=${{ secrets.PROD_JWT_SECRET || 'prod-jwt-secret-for-calendar-minimum-256-bits-length-required' }}
            
            # Redis Configuration
            REDIS_HOST=redis
            REDIS_PORT=6379
            REDIS_PASSWORD=${{ secrets.PROD_REDIS_PASSWORD || 'calendar_redis_prod_123' }}
            
            # Mail Configuration
            MAIL_USERNAME=${{ secrets.MAIL_USERNAME || '' }}
            MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD || '' }}
            
            # Spring Boot Configuration
            SPRING_PROFILES_ACTIVE=prod
            SPRINGDOC_SWAGGER_UI_ENABLED=false
            SPRINGDOC_API_DOCS_ENABLED=false
            
            # PostgreSQL Configuration for Docker
            POSTGRES_DB=calendar_prod
            POSTGRES_USER=calendar_user
            POSTGRES_PASSWORD=${{ secrets.PROD_DB_PASSWORD || 'calendar_prod_password_123' }}
            
            # Redis Configuration for Docker
            REDIS_PASSWORD=${{ secrets.PROD_REDIS_PASSWORD || 'calendar_redis_prod_123' }}
            EOF
            
            # Docker 이미지 빌드 및 컨테이너 시작
            echo "Building and starting containers..."
            docker-compose --env-file .env.production up -d --build
            
            # 컨테이너 시작 대기
            echo "Waiting for services to start..."
            sleep 30
            
            # 서비스 상태 확인
            echo "Checking service status..."
            docker-compose ps
            
            # 백엔드 헬스체크
            echo "Performing health check..."
            for i in {1..10}; do
              if curl -f http://localhost:8080/api/actuator/health 2>/dev/null; then
                echo "Backend health check passed!"
                break
              else
                echo "Attempt $i: Backend not ready yet, waiting..."
                sleep 10
              fi
            
              if [ $i -eq 10 ]; then
                echo "Backend health check failed after 10 attempts"
                docker-compose logs backend
                exit 1
              fi
            done
            
            # 프론트엔드 헬스체크
            echo "Checking frontend..."
            if curl -f http://localhost:3000 2>/dev/null; then
              echo "Frontend is running!"
            else
              echo "Frontend check failed, but continuing..."
              docker-compose logs frontend
            fi
            
            echo "Deployment completed successfully!"
            echo "Backend: http://43.201.22.192:8080"
            echo "Frontend: http://43.201.22.192:3000"