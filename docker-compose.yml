services:
  # PostgreSQL 데이터베이스
  postgres:
    image: postgres:16
    container_name: calendar-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    # ports:
    #   - "5432:5432"  # 포트 충돌 방지를 위해 외부 노출 제거 (내부 네트워크만 사용)
    volumes:
      # 데이터 영구 저장
      - postgres_data:/var/lib/postgresql/data
      # 초기화 스크립트 (옵션)
      - ./docker/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - calendar-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis 캐시
  redis:
    image: redis:7-alpine
    container_name: calendar-redis
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    # ports:
    #   - "6379:6379"  # 포트 충돌 방지를 위해 외부 노출 제거 (내부 네트워크만 사용)
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      # 데이터 영속성을 위한 볼륨
      - redis_data:/data
    networks:
      - calendar-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    # Redis 설정으로 실행 (옵션)
    # command: redis-server /usr/local/etc/redis/redis.conf

  # Spring Boot 애플리케이션
  calendar-app:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: calendar-app
    ports:
      - "8080:8080"
    environment:
      # Spring Profile
      SPRING_PROFILES_ACTIVE: prod
      
      # 데이터베이스 연결 (Docker 네트워크 사용)
      DB_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB}
      DB_USERNAME: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      
      # Redis 연결
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      
      # JWT 설정
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION: ${JWT_EXPIRATION}
      
      # 이메일 설정
      MAIL_USERNAME: ${MAIL_USERNAME}
      MAIL_PASSWORD: ${MAIL_PASSWORD}
      
      # JVM 옵션
      JAVA_OPTS: ${JAVA_OPTS}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - calendar-network
    volumes:
      # 로그 파일 외부 저장
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 프론트엔드 서비스 (Nginx로 React 빌드 파일 서빙)
  frontend:
    image: nginx:alpine
    container_name: calendar-frontend
    ports:
      - "3000:80"
    volumes:
      - ./frontend/dist:/usr/share/nginx/html
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - calendar-app
    networks:
      - calendar-network
    restart: unless-stopped

# 네트워크 정의
networks:
  calendar-network:
    driver: bridge
    name: calendar-network

# 볼륨 정의 (데이터 영구 저장)
volumes:
  postgres_data:
    name: calendar-postgres-data
  redis_data:
    name: calendar-redis-data
